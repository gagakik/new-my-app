CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) DEFAULT 'user'
);

CREATE TABLE equipment (
    id SERIAL PRIMARY KEY,
    code_name VARCHAR(255) UNIQUE NOT NULL,
    quantity INTEGER NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT,
    image_url VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL
);



CREATE TABLE exhibitions (
    id SERIAL PRIMARY KEY,
    exhibition_name VARCHAR(255) NOT NULL,
    comment TEXT,
    manager VARCHAR(255) NOT NULL
);

psql -d my_app_db -U gaga
```psql` კონსოლში (`my_app_db=>` ან მსგავსი), გაუშვით ეს ბრძანებები:

```sql
-- წაშალეთ არსებული ცხრილი, თუ ის არსებობს (ეს წაშლის ყველა მონაცემს ამ ცხრილიდან!)
DROP TABLE IF EXISTS companies;

-- შექმენით ENUM ტიპი კომპანიის სტატუსისთვის (თუ უკვე არ არსებობს)
CREATE TYPE company_status AS ENUM (
    'აქტიური',
    'არქივი'
);

-- შექმენით ENUM ტიპი ქვეყნებისთვის (თუ უკვე არ არსებობს)
CREATE TYPE company_country AS ENUM (
    'საქართველო',
    'აშშ',
    'გერმანია',
    'საფრანგეთი',
    'დიდი ბრიტანეთი',
    'იაპონია',
    'ჩინეთი',
    'ინდოეთი',
    'ბრაზილია',
    'კანადა'
);

-- შექმენით companies ცხრილი განახლებული ველებით
CREATE TABLE companies (
    id SERIAL PRIMARY KEY,
    company_name VARCHAR(255) NOT NULL,
    country company_country NOT NULL,
    company_profile TEXT,
    identification_code VARCHAR(50) UNIQUE NOT NULL,
    legal_address TEXT,
    
    -- საკონტაქტო პირები (JSONB ტიპი შეუზღუდავი რაოდენობისთვის)
    contact_persons JSONB DEFAULT '[]'::jsonb, 
    
    website VARCHAR(255),
    comment TEXT,
    status company_status DEFAULT 'აქტიური',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL
);

.env file

DATABASE_URL="postgres://gaga:Sami4xuti@localhost:5432/my_app_db"


JWT_SECRET=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30


db.js file 
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

module.exports = {
  query: (text, params) => pool.query(text, params),
};


psql -d my_app_db -U gaga
```psql` კონსოლში (`my_app_db=>` ან მსგავსი), გაუშვით ეს ბრძანებები:

```sql
-- შექმენით ENUM ტიპი სივრცის კატეგორიებისთვის
CREATE TYPE space_category AS ENUM (
    'საოფისე',
    'საგამოფენო',
    'საპარკინგე',
    'სასაწყობე',
    'საწარმო',
    'ივენთები',
    'საკომფერენციო'
);

-- შექმენით spaces ცხრილი
CREATE TABLE spaces (
    id SERIAL PRIMARY KEY,
    category space_category NOT NULL,
    building_name VARCHAR(255) NOT NULL,
    description TEXT,
    area_sqm DECIMAL(10, 2), -- არ არის სავალდებულო
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL
<<<<<<< HEAD
);


const createTables = async () => {
  try {
    // Annual Services table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS annual_services (
        id SERIAL PRIMARY KEY,
        service_name VARCHAR(255) NOT NULL,
        description TEXT,
        price DECIMAL(10,2),
        duration_hours INTEGER,
        available_from DATE,
        available_to DATE,
        max_capacity INTEGER,
        service_type VARCHAR(100) DEFAULT 'საფუძვლო',
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_by_user_id INTEGER REFERENCES users(id)
      )
    `);

    // Bookings table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS bookings (
        id SERIAL PRIMARY KEY,
        service_id INTEGER REFERENCES annual_services(id),
        exhibition_id INTEGER REFERENCES exhibitions(id),
        company_id INTEGER REFERENCES companies(id),
        booking_date DATE NOT NULL,
        start_time TIME,
        end_time TIME,
        status VARCHAR(50) DEFAULT 'pending',
        total_amount DECIMAL(10,2),
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_by_user_id INTEGER REFERENCES users(id)
      )
    `);

    await pool.query(`
    CREATE TABLE spaces (
    id SERIAL PRIMARY KEY,
    category space_category NOT NULL,
    building_name VARCHAR(255) NOT NULL,
    description TEXT,
    area_sqm DECIMAL(10, 2), -- არ არის სავალდებულო
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL
);
`);
    await pool.query(`
CREATE TYPE space_category AS ENUM (
    'საოფისე',
    'საგამოფენო',
    'საპარკინგე',
    'სასაწყობე',
    'საწარმო',
    'ივენთები',
    'საკომფერენციო'
);
`);

    // Statistics table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS statistics (
        id SERIAL PRIMARY KEY,
        exhibition_id INTEGER REFERENCES exhibitions(id),
        metric_name VARCHAR(255) NOT NULL,
        metric_value DECIMAL(15,2),
        metric_date DATE DEFAULT CURRENT_DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Company-Exhibition junction table (კომპანია-გამოფენის კავშირი)
    await pool.query(`
      CREATE TABLE IF NOT EXISTS company_exhibitions (
        id SERIAL PRIMARY KEY,
        company_id INTEGER REFERENCES companies(id) ON DELETE CASCADE,
        exhibition_id INTEGER REFERENCES exhibitions(id) ON DELETE CASCADE,
        participation_status VARCHAR(50) DEFAULT 'მონაწილე',
        booth_number VARCHAR(50),
        booth_size DECIMAL(10,2),
        registration_date DATE DEFAULT CURRENT_DATE,
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(company_id, exhibition_id)
      )
    `);

    console.log('Database tables created successfully');
  } catch (error) {
    console.error('Error creating tables:', error);
  }
};

// Initialize tables
createTables();



ჩავასწოროთ ბაზა და კოდიც - ახალი სერვისის დამატება

ველების ჩამონათვალი:

1. სერვისის სახელი
2. აღწერა
3. წელის არჩევა (არქივის ფუნქციას რომ დავამატებთ მერე დაგვჭირდება ფილტრისთვის)
4. სერვისების სიიდან არჩევის უფლება (უნდა შემეძლოს სივცეების მონიშვნა რამდენიც დამჭირდება)
5. თარიღის მითითება : დაწყების და დასრულების
6. სერვისის სტატუსის მინიჭება: გამოფენა, კომფერენცია, გაქირავება, ივენთი.

მუშაობის ლოგიკა: როდესაც დასრულების თარიღის მეორე დღეს უნდა შემეძლოს არქივში შენახვის უფლება თავის მონაწილეებით და მონაცემებით, 
როდესაც ბუკინგში შეყვანილი მონაცემებში მიუთითებ კონკრეტულ სერვის შემდეგ ამსერვიში რო შევალ იქ უნდა მიჩანდეს ბუკინგით დამატებული მონაწილეები, ასევე უნდა შემეძლოს მანდვე კომპანისს დეტალების ნახვა რედაქტირება,

ჯერ ეს გავიაროთ და მერე კიდე დავხვეწოთ დეტალები.
=======
);
>>>>>>> e8881a64810b628cdde938a6aa8d6d64c1684dd8
