CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) DEFAULT 'user'
);

CREATE TABLE equipment (
    id SERIAL PRIMARY KEY,
    code_name VARCHAR(255) UNIQUE NOT NULL,
    quantity INTEGER NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT,
    image_url VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL
);



CREATE TABLE exhibitions (
    id SERIAL PRIMARY KEY,
    exhibition_name VARCHAR(255) NOT NULL,
    comment TEXT,
    manager VARCHAR(255) NOT NULL
);

psql -d my_app_db -U gaga
```psql` კონსოლში (`my_app_db=>` ან მსგავსი), გაუშვით ეს ბრძანებები:

```sql
-- წაშალეთ არსებული ცხრილი, თუ ის არსებობს (ეს წაშლის ყველა მონაცემს ამ ცხრილიდან!)
DROP TABLE IF EXISTS companies;

-- შექმენით ENUM ტიპი კომპანიის სტატუსისთვის (თუ უკვე არ არსებობს)
CREATE TYPE company_status AS ENUM (
    'აქტიური',
    'არქივი'
);

-- შექმენით ENUM ტიპი ქვეყნებისთვის (თუ უკვე არ არსებობს)
CREATE TYPE company_country AS ENUM (
    'საქართველო',
    'აშშ',
    'გერმანია',
    'საფრანგეთი',
    'დიდი ბრიტანეთი',
    'იაპონია',
    'ჩინეთი',
    'ინდოეთი',
    'ბრაზილია',
    'კანადა'
);

-- შექმენით companies ცხრილი განახლებული ველებით
CREATE TABLE companies (
    id SERIAL PRIMARY KEY,
    company_name VARCHAR(255) NOT NULL,
    country company_country NOT NULL,
    company_profile TEXT,
    identification_code VARCHAR(50) UNIQUE NOT NULL,
    legal_address TEXT,
    
    -- საკონტაქტო პირები (JSONB ტიპი შეუზღუდავი რაოდენობისთვის)
    contact_persons JSONB DEFAULT '[]'::jsonb, 
    
    website VARCHAR(255),
    comment TEXT,
    status company_status DEFAULT 'აქტიური',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_by_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL
);

.env file

DATABASE_URL="postgres://gaga:Sami4xuti@localhost:5432/my_app_db"


JWT_SECRET=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30


db.js file 
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

module.exports = {
  query: (text, params) => pool.query(text, params),
};